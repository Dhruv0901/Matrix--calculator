matrix1 = []
Row1 = {}
Column1 = {}

matrix2 = []
Row2 = {}
Column2 = {}

matrix_sum = []
matrix_diff = []
matrix_scalar_multiply_list = []
matrix_multiply = []

a = 0
b = 0

p = 0
q = 0


def matrices_maker(matrix):
    row = int(input("no of rows = "))
    column = int(input("no of columns = "))
    for i in range(0, row):
        row_list = []
        print(f"value for row -> {i} ")
        for j in range(0, column):
            a = int(input(f"value for {i, j} -> "))
            row_list.append(a)
        matrix.append(row_list)
    print("matrix is -> ")
    for i in range(0, row):
        for j in range(0, column):
            print(matrix[i][j], end="\t")
        print()


def matrices_column_fetcher(column, matrix):
    def value_of_column(countervar2):
        countervar1 = 0
        a = []
        for i in range(len(matrix)):
            a.append(matrix[countervar1][countervar2])
            countervar1 += 1
        return a

    for j in range(len(matrix[0])):
        Q = j + 1
        column_name = f"column {Q}"
        column[column_name] = value_of_column(j)


def matrices_row_fetcher(row, matrix):
    for i in range(len(matrix)):
        row[f"row {i + 1}"] = matrix[i]


def decison_function(fst_row, fst_column, lst_row, lst_column):
    global matrix1
    global Row1
    global Column1

    global matrix2
    global Row2
    global Column2

    global matrix_sum
    global matrix_diff

    def matrix_addition(a_list, first_matrix, second_matrix):
        try:
            for i in range(len(first_matrix[0])):
                ele = []
                for j in range(len(first_matrix[0])):
                    a = first_matrix[i][j] + second_matrix[i][j]
                    ele.append(a)
                a_list.append(ele)
            row = len(Row1)
            column = len(Column1)
            for i in range(0, row):
                for j in range(0, column):
                    print(a_list[i][j], end="\t")
                print()
            print("\n" * 5)


        except IndexError:
            print("Sorry, but your matrices don't have a same order. Kindly try again.")
            print("\n" * 5)

    def matrix_subtraction(a_list, first_matrix, second_matrix):
        try:
            for i in range(len(first_matrix[0])):
                ele = []
                for j in range(len(first_matrix[0])):
                    a = first_matrix[i][j] - second_matrix[i][j]
                    ele.append(a)
                a_list.append(ele)
            row = len(Row1)
            column = len(Column1)
            for i in range(0, row):
                for j in range(0, column):
                    print(a_list[i][j], end="\t")
                print()
            print("\n" * 5)

        except IndexError:
            print("Sorry, but your matrices don't have a same order. Kindly try again.")
            print("\n" * 5)

    def matrix_scalar_multiply(a_list, first_matrix, second_matrix):
        try:
            for i in range(len(first_matrix[0])):
                ele = []
                for j in range(len(first_matrix[0])):
                    a = first_matrix[i][j] * second_matrix[i][j]
                    ele.append(a)
                a_list.append(ele)
            row = len(Row1)
            column = len(Column1)
            for i in range(0, row):
                for j in range(0, column):
                    print(a_list[i][j], end="\t")
                print()
            print("\n" * 5)

        except IndexError:
            print("Sorry, but your matrices don't have a same order. Kindly try again.")
            print("\n" * 5)

    def matrix_multiplication(no1, no2, no3, no4):
        def for_2():
            global Row1
            global Column2
            main_list1 = []
            a_list1 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 1"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list1.append(ele)
            for a in range(len(a_list1)):
                c = 0
                for b in range(len(a_list1[0])):
                    c = c + a_list1[a][b]
                main_list1.append(c)
            main_list2 = []
            a_list2 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 2"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list2.append(ele)
            for a in range(len(a_list2)):
                c = 0
                for b in range(len(a_list2[0])):
                    c = c + a_list2[a][b]
                main_list2.append(c)
            final_list = []
            final_list.append(main_list1)
            final_list.append(main_list2)
            return final_list

        def for_3():
            global Row1
            global Column2
            main_list1 = []
            a_list1 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 1"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list1.append(ele)
            for a in range(len(a_list1)):
                c = 0
                for b in range(len(a_list1[0])):
                    c = c + a_list1[a][b]
                main_list1.append(c)

            main_list2 = []
            a_list2 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 2"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list2.append(ele)
            for a in range(len(a_list2)):
                c = 0
                for b in range(len(a_list2[0])):
                    c = c + a_list2[a][b]
                main_list2.append(c)

            main_list3 = []
            a_list3 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 3"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list3.append(ele)
            for a in range(len(a_list3)):
                c = 0
                for b in range(len(a_list3[0])):
                    c = c + a_list3[a][b]
                main_list3.append(c)

            final_list = []
            final_list.append(main_list1)
            final_list.append(main_list2)
            final_list.append(main_list3)
            return final_list

        def for_4():
            global Row1
            global Column2
            main_list1 = []
            a_list1 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 1"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list1.append(ele)
            for a in range(len(a_list1)):
                c = 0
                for b in range(len(a_list1[0])):
                    c = c + a_list1[a][b]
                main_list1.append(c)

            main_list2 = []
            a_list2 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 2"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list2.append(ele)
            for a in range(len(a_list2)):
                c = 0
                for b in range(len(a_list2[0])):
                    c = c + a_list2[a][b]
                main_list2.append(c)

            main_list3 = []
            a_list3 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 3"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list3.append(ele)
            for a in range(len(a_list3)):
                c = 0
                for b in range(len(a_list3[0])):
                    c = c + a_list3[a][b]
                main_list3.append(c)

            main_list4 = []
            a_list4 = []
            for i in range(len(Row1["row 1"])):
                ele = []
                for j in range(len(Row1["row 1"])):
                    a = Row1["row 4"][j] * Column2[f"column {i + 1}"][j]
                    ele.append(a)
                a_list4.append(ele)
            for a in range(len(a_list4)):
                c = 0
                for b in range(len(a_list4[0])):
                    c = c + a_list4[a][b]
                main_list4.append(c)

            final_list = []
            final_list.append(main_list1)
            final_list.append(main_list2)
            final_list.append(main_list3)
            final_list.append(main_list4)
            return final_list

        a = []
        if a == p or b == q:
            if no1 == 2:
                if no1 >= no2:
                    a = for_2()
                elif no2 == 3:
                    a = for_3()
                elif no2 == 4:
                    a = for_4()
                else:
                    print("sorry, could'nt complete the operation")

            elif no2 == 2:
                if no2 >= no1:
                    a = for_2()
                elif no1 == 3:
                    a = for_3()
                elif no1 == 4:
                    a = for_4()
                else:
                    print("sorry, could'nt complete the operation")

            elif no1 == 3:
                if no1 >= no2:
                    a = for_3()
                elif no2 == 4:
                    a = for_4()
                else:
                    print("sorry, could'nt complete the operation")

            elif no2 == 3:
                if no2 >= no1:
                    a = for_3()
                elif no1 == 4:
                    a = for_4()
                else:
                    print("sorry, could'nt complete the operation")

            elif no1 == 4:
                if no1 >= no2:
                    a = for_4()
                else:
                    print("sorry, could'nt complete the operation")

            elif no2 == 4:
                if no2 >= no1:
                    a = for_4()
                else:
                    print("sorry, could'nt complete the operation")

        else:
            print("sorry, could'nt complete the operation")

            if not a:
                pass
            else:
                row = len(a[0])
                column = len(a[0])

                for i in range(0, row):
                    for j in range(0, column):
                        print(a[i][j], end="\t")
                    print()

    def choice():
        global a
        global b
        global p
        global q
        main_choice = input(
            "What do You want to do ?(A = addition, S = subtraction, SM = scalar multiplication, M = multiplication)").lower()
        if main_choice == "a":
            matrix_addition(matrix_sum, matrix1, matrix2)
            return "a"
        elif main_choice == "s":
            matrix_subtraction(matrix_diff, matrix1, matrix2)
            return "s"
        elif main_choice == "sm":
            matrix_scalar_multiply(matrix_scalar_multiply_list, matrix1, matrix2)
            return "sm"
        elif main_choice == "m":
            matrix_multiplication(a, b, p, q)

    choice()


def aesthetics():
    global matrix1
    global Row1
    global Column1

    global matrix2
    global Row2
    global Column2

    global matrix_sum

    global a
    global b
    global p
    global q

    matrix1 = []
    Row1 = {}
    Column1 = {}

    matrix2 = []
    Row2 = {}
    Column2 = {}

    matrix_sum = []
    matrix_diff = []
    matrix_scalar_multiply_list = []
    matrix_multiply = []

    a = 0
    b = 0

    p = 0
    q = 0

    matrices_maker(matrix1)
    print("\n" * 2)
    matrices_row_fetcher(Row1, matrix1)
    matrices_column_fetcher(Column1, matrix1)
    print("\n" * 10)
    matrices_maker(matrix2)
    print("\n" * 2)
    matrices_row_fetcher(Row2, matrix2)
    matrices_column_fetcher(Column2, matrix2)

    a = len(Row1["row 1"])
    b = len(Column1["column 1"])

    p = len(Row2["row 1"])
    q = len(Column2["column 1"])










